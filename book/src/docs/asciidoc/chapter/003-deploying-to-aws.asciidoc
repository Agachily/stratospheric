[[deploying]]
== Deploying the Application to AWS

=== Deployment Options

* goal: give an idea of the different deployment options with their pros and cons
* Beanstalk
* AWS Console
* CloudFormation
* AWS CDK
* In the remainder of the book we'll be focussing on CloudFormation , because it provides the basis for the other technologies.

=== Introduction to AWS CloudFormation

* What is AWS CloudFormation and why do we use it?
* How does is work?
* key concepts

==== Prerequisites

* What do you need in order to get started with AWS CloudFormation?

===== Requisite Permissions

* complex permission sets required
* no simple setting, other than "AdministratorAccess" and "AmazonEC2FullAccess", that is
* guideline on how to set up the required permissions for working with AWS CloudFormation

===== Using the AWS CLI

* installing the AWS CLI
* configuring the AWS CLI and your system environment

===== Working With AWS CloudFormation Templates

* introduction to structure of AWS CloudFormation templates
* key concepts
* overview of necessary data types, API methods and configuration options
* utility methods for referencing and destructuring variables

===== Tying Everything Together: AWS CloudFormation API and Shell Scripts

* integration via shell scripts
* how to execute AWS CloudFormation Templates via the AWS CLI

====== Alternative: AWS Cloud Development Kit (CDK)

* using the AWS Cloud Development Kit (CDK) from Java instead of shell scripts

==== Building Environments with AWS CloudFormation Stacks

* setting up complex environments with supporting services
* creating, updating, and deleting stacks
* using health check endpoints
* organizing your stacks and project files expediently

=== AWS CloudFormation Recipes

* pragmatic real-life recipes for using AWS CloudFormation for meeting specific requirements

==== Recipe: Creating a Basic Virtual Private Cloud (VPC)

* pool of shared computing resources
* isolation

==== Recipe: Publishing a Docker Image to Elastic Container Registry (ECR)

* setting up a container registry
* using https://github.com/features/actions[GitHub Actions] for building and pushing Docker images

==== Recipe: Deploying a Docker Image to Elastic Container Service (ECS)

* extending the basic stack with deploying the Docker images to the VPC
* running Docker on ECS rather than going bare-metal with EC2
* pros and cons

==== Recipe: Creating an AWS Cognito User Pool and Client

* introduction to OAuth, key concepts
* introduction to AWS Cognito
** key concepts
** processes
** use cases
** data storage
** messaging (i.e. email)
** sample UI
* manual configuration
* scripted configuration
* useful CLI commands

==== Recipe: Deploying an Application and Ancillary Services

* using what we've learned so far for deploying an entire application and its components

===== Ssetting up a PostgreSQL Database

* setting up and running a PostgreSQL Database
* security and networking
* database initialisation
* setting up a jump Host for administrative database access from outside the application

===== Recipe: Creating and Running a Load Balancer

* using a load balance for enhanced scalability

===== Recipe: Using Amazon's API Gateway

* using an API gateway / reverse proxy for routing requests to different components

==== Recipe: Using a Custom Domain With Route 53

* DNS with Route 53
* dynamically adapting the public URL to a changing AWS instance URL
* using HTTPS
* dynamically generating new certificates with https://letsencrypt.org/[Let's Encrypt]

=== Running and Testing the Application Locally During Development

* with not AWS environment present
* Spring annotations for mocking various AWS components
* Spring annotations for selectively enabling and disabling features depending on the environment available

=== Observability

* CloudWatch
* CloudTrail
* basis for observability topics in future chapters

=== Keeping Your Costs in Check

* Billing Console
* Cost Explorer
* usage thresholds
* cost and usage reports
* eligibility for AWS Free Tier

=== Summary and Key Takeaways

=== Bonus: Deployment Patterns

* Blue-Green
* canary deployments

